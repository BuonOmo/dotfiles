# Helper to manipulate dotfiles.
# Usage:
#   dotf                 # (un)aliases git to dotf, making it like using git normally (ex: dotf; git pull; dotf)
#   dotf <git alias> ... # resolve <git alias> in dotf context (ex: dotf ga .zshrc)
#   dotf ...             # pass arguments to git in dotf context (ex: dotf push)
#   dotf doctor          # check some possible installation issues
dotf() {
	__dotf_hook() {
		echo "(dotfile mode)"
	}
	local unaliased="$aliases[$1]"
	if (( $# == 0 )); then # Env mode
		if [[ "$aliases[git]" = "dotf" ]]; then
			unalias git
			add-zsh-hook -d precmd __dotf_hook
		else
			# https://github.com/zsh-users/zsh/blob/master/Functions/Misc/add-zsh-hook
			add-zsh-hook precmd __dotf_hook
			alias git=dotf
		fi
	elif [[ "$1" = "doctor" ]]; then
		local dotf_status=0
		__dotf_assert() {
			local curr_status="$?"
			if (( curr_status == 0 )); then
				printf "✅  "
			else
				printf "❌  "
				dotf_status=$curr_status
			fi
			echo "$1"
		}

		[[ "$(launchctl list | grep ulysse | awk '{ print $1 }')" =~ "[0-9]+" ]]
		__dotf_assert "Witchcraft server"

		fc-list | grep -iq '\bmonolisa\b'
		__dotf_assert 'MonoLisa font (https://monolisa.dev)'

		return $dotf_status
	elif [[ "$unaliased" = "git "* ]]; then # Alias resolving
		eval "${unaliased/git/dotf} ${@:2}"
	else # Default
		git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $@
	fi
}
